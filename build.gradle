plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.ming'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExt
    println(asciidoctorExt)
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation 'com.auth0:java-jwt:4.2.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor"
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    doFirst {
        var indexfile = file("src/main/resources/static/docs/index.html")
        if (indexfile.delete()) {
            println "기존 문서가 삭제되었습니다."
        }
    }

    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test

    doLast {
        copy {
            from("build/docs/asciidoc")
            into("src/main/resources/static/docs")
        }
    }
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

tasks.register('release') {
    dependsOn("build")

    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine(["eb", "setenv", "SPRING_PROFILES_ACTIVE=prod"])
            standardOutput = stdout
        }

        println("eb setenv SPRING_PROFILES_ACTIVE=prod: \n$stdout")

        exec {
            commandLine(["eb", "deploy"])
            standardOutput = stdout
        }

        println("eb deploy: \n$stdout")
        println("Release succeeded")
    }
}

